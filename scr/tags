!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
FastScanner	a.java	/^	static class FastScanner {$/;"	c	class:a
ListNode	l.cpp	/^    ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode	file:
ListNode	l.cpp	/^    ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode	file:
ListNode	l.cpp	/^    ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode	file:
ListNode	l.cpp	/^struct ListNode {$/;"	s	file:
Main	Main.java	/^public class Main {$/;"	c
N	main.cpp	/^const int N = 1e5;  \/\/ limit for array size$/;"	v	typeref:typename:const int
Solution	l.cpp	/^class Solution {$/;"	c	file:
TreeAncestor	a.cpp	/^    TreeAncestor(int n, vector<int>& parent) {$/;"	f	class:TreeAncestor	file:
TreeAncestor	a.cpp	/^class TreeAncestor {$/;"	c	file:
__int	gen.c	/^#define __int(/;"	d	file:
__longdouble	gen.c	/^#define __longdouble(/;"	d	file:
a	a.java	/^public class a {$/;"	c
addTwoNumbers	l.cpp	/^    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {$/;"	f	class:Solution	typeref:typename:ListNode *	file:
b	f.cpp	/^sim > struct rge { c b, e; };$/;"	m	struct:rge	typeref:typename:c	file:
br	a.java	/^		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));$/;"	f	class:a.FastScanner
build	main.cpp	/^void build() {  \/\/ build the tree$/;"	f	typeref:typename:void
dbg	gen.c	/^#define dbg(/;"	d	file:
dbg	x.c	/^	#define dbg(/;"	d	file:
debug	f.cpp	/^struct debug {$/;"	s	file:
depth	a.cpp	/^    vector<int> depth;$/;"	m	class:TreeAncestor	typeref:typename:vector<int>	file:
dfs	a.cpp	/^    int dfs ( vector<int>& parent, int me ) {$/;"	f	class:TreeAncestor	typeref:typename:int	file:
dor	f.cpp	/^#define dor /;"	d	file:
e	f.cpp	/^sim > struct rge { c b, e; };$/;"	m	struct:rge	typeref:typename:c	file:
eni	f.cpp	/^#define eni(/;"	d	file:
eni	f.cpp	/^eni(==) ris << range(begin(i), end(i)); }$/;"	v	typeref:struct:debug
fmt	macro.c	/^#define fmt /;"	d	file:
getKthAncestor	a.cpp	/^    int getKthAncestor(int node, int k) {$/;"	f	class:TreeAncestor	typeref:typename:int	file:
is_empty	sau.java	/^		boolean is_empty() {$/;"	m	class:sau.stack
log	a.cpp	/^    int log = 20;$/;"	m	class:TreeAncestor	typeref:typename:int	file:
main	Main.java	/^	public static void main ( String args[] ) {$/;"	m	class:Main
main	a.cpp	/^int main ()$/;"	f	typeref:typename:int
main	a.java	/^	public static void main(String[] args) {$/;"	m	class:a
main	gen.c	/^int main(void)$/;"	f	typeref:typename:int
main	l.cpp	/^int main ()$/;"	f	typeref:typename:int
main	macro.c	/^int main() {$/;"	f	typeref:typename:int
main	main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	sau.java	/^	public static void main(String[] args) {$/;"	m	class:sau
main	x.c	/^int main ()$/;"	f	typeref:typename:int
modify	main.cpp	/^void modify(int p, int value) {  \/\/ set value at position p$/;"	f	typeref:typename:void
n	main.cpp	/^int n;  \/\/ array size$/;"	v	typeref:typename:int
next	a.java	/^		String next() {$/;"	m	class:a.FastScanner
next	l.cpp	/^    ListNode *next;$/;"	m	struct:ListNode	typeref:typename:ListNode *	file:
nextInt	a.java	/^		int nextInt() {$/;"	m	class:a.FastScanner
nextLong	a.java	/^		long nextLong() {$/;"	m	class:a.FastScanner
pop	sau.java	/^		int pop () {$/;"	m	class:sau.stack
print_reverse	sau.java	/^		void print_reverse ()$/;"	m	class:sau.stack
push	sau.java	/^		void push ( int val ) {$/;"	m	class:sau.stack
query	main.cpp	/^int query(int l, int r) {  \/\/ sum on interval [l, r)$/;"	f	typeref:typename:int
range	f.cpp	/^sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }$/;"	f	typeref:typename:sim> rge<c>
readArray	a.java	/^		int[] readArray(int n) {$/;"	m	class:a.FastScanner
rge	f.cpp	/^sim > struct rge { c b, e; };$/;"	s	file:
ris	f.cpp	/^#define ris /;"	d	file:
sau	sau.java	/^public class sau {$/;"	c
si	sau.java	/^		int si;$/;"	f	class:sau.stack
sim	f.cpp	/^#define sim /;"	d	file:
sort	a.java	/^	static void sort(int[] a) {$/;"	m	class:a
st	a.java	/^		StringTokenizer st=new StringTokenizer("");$/;"	f	class:a.FastScanner
stack	sau.java	/^		stack ( int in_id[], int size ) {$/;"	m	class:sau.stack
stack	sau.java	/^	static class stack {$/;"	c	class:sau
staticQuery	main.cpp	/^int staticQuery(int L, int R) {$/;"	f	typeref:typename:int
stck	sau.java	/^		int stck[];$/;"	f	class:sau.stack
t	main.cpp	/^int t[2 * N];$/;"	v	typeref:typename:int[]
tos	sau.java	/^		int tos;$/;"	f	class:sau.stack
typearg	gen.c	/^#define typearg(/;"	d	file:
typename	gen.c	/^#define typename(/;"	d	file:
typename	macro.c	/^#define typename(/;"	d	file:
val	l.cpp	/^    int val;$/;"	m	struct:ListNode	typeref:typename:int	file:
vvi	a.cpp	/^    vector<vector<int>> vvi = vector<vector<int>>(20, vector<int>(50005));$/;"	m	class:TreeAncestor	typeref:typename:vector<vector<int>>	file:
~debug	f.cpp	/^~debug() { cerr << endl; }$/;"	f	struct:debug	file:
